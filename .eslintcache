[{"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\index.tsx":"1","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\reportWebVitals.ts":"2","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\App.tsx":"3","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\store.ts":"4","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\reducers\\notificationReducer.ts":"5","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\reducers\\listReducer.ts":"6","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\Type.ts":"7","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\Header.tsx":"8","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\CreateNewList.tsx":"9","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\actions\\index.ts":"10","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\actions\\notificationActions.ts":"11","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\actions\\listActions.ts":"12","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\Sidebar.tsx":"13","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\Notification.tsx":"14","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\Lists.tsx":"15","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\DeleteListModal.tsx":"16","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\EditListModal.tsx":"17"},{"size":742,"mtime":1611311585460,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":1207,"mtime":1611578050565,"results":"21","hashOfConfig":"19"},{"size":476,"mtime":1611216480642,"results":"22","hashOfConfig":"19"},{"size":530,"mtime":1611291755429,"results":"23","hashOfConfig":"19"},{"size":5794,"mtime":1611225113038,"results":"24","hashOfConfig":"19"},{"size":3618,"mtime":1611552822288,"results":"25","hashOfConfig":"19"},{"size":570,"mtime":1611311955081,"results":"26","hashOfConfig":"19"},{"size":1964,"mtime":1611561749642,"results":"27","hashOfConfig":"19"},{"size":68,"mtime":1611292205512,"results":"28","hashOfConfig":"19"},{"size":258,"mtime":1611220943652,"results":"29","hashOfConfig":"19"},{"size":2719,"mtime":1611220943652,"results":"30","hashOfConfig":"19"},{"size":301,"mtime":1611568318159,"results":"31","hashOfConfig":"19"},{"size":1270,"mtime":1611575624936,"results":"32","hashOfConfig":"19"},{"size":1708,"mtime":1611571801861,"results":"33","hashOfConfig":"19"},{"size":2522,"mtime":1611576245106,"results":"34","hashOfConfig":"19"},{"size":2687,"mtime":1611580720479,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1srox7q",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\index.tsx",[],["74","75"],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\reportWebVitals.ts",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\App.tsx",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\store.ts",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\reducers\\notificationReducer.ts",["76"],"import { NotificationAction, NotificationState, SET_NOTIFICATION } from \"../Type\"\r\n\r\nconst initialState: NotificationState = {\r\n    message: '',\r\n    type: 'success'\r\n}\r\n\r\n\r\nexport default (state = initialState, action: NotificationAction): NotificationState => {\r\n    switch (action.type) {\r\n        case SET_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                message: action.payload.msg,\r\n                type: action.payload.type\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\reducers\\listReducer.ts",["77","78","79"],"import { parse } from \"path\";\r\nimport { ADD_LIST, ADD_TASK, DELETE_LIST, DELETE_TASK, GET_LISTS, GET_LIST_BY_ID, Lists, ListsAction, ListState, SET_LISTID_TO_DELETE, SET_LIST_TO_EDIT, SET_SELECTED_LIST, SET_TASK_TO_DELETE, SET_TASK_TO_EDIT, Task, UNSET_TASK_TO_DELETE, UNSET_TASK_TO_EDIT, UPDATE_LIST, UPDATE_TASK } from \"../Type\"\r\n\r\n\r\nconst initialState: ListState = {\r\n    lists: {},\r\n    listIdToDelete: '',\r\n    listToEdit: null,\r\n    listById: null,\r\n    selectedList: null,\r\n    taskToDelete: null,\r\n    taskToEdit: null\r\n}\r\n\r\nconst getListsFromLS = (): Lists => {\r\n    if (localStorage.getItem('task_list')) {\r\n        return JSON.parse(localStorage.getItem('task_list') || `{}`)\r\n    }\r\n    return {};\r\n}\r\n\r\nconst saveListsToLS = (lists: Lists) => {\r\n    localStorage.setItem('task_list', JSON.stringify(lists))\r\n}\r\n\r\nexport default (state = initialState, action: ListsAction): ListState => {\r\n\r\n    const listsFromLS = getListsFromLS();\r\n\r\n\r\n    switch (action.type) {\r\n        case ADD_LIST:\r\n            const copiedListsFromLS = { ...listsFromLS };\r\n            copiedListsFromLS[action.payload.id] = action.payload;\r\n            saveListsToLS(copiedListsFromLS);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS\r\n            }\r\n        case GET_LISTS:\r\n            return {\r\n                ...state,\r\n                lists: listsFromLS\r\n            }\r\n        case GET_LIST_BY_ID:\r\n            return {\r\n                ...state,\r\n                listById: listsFromLS[action.payload]\r\n            }\r\n        case SET_LISTID_TO_DELETE:\r\n            return {\r\n                ...state,\r\n                listIdToDelete: action.payload\r\n            }\r\n        case SET_LIST_TO_EDIT:\r\n\r\n            return {\r\n                ...state,\r\n                listToEdit: listsFromLS[action.payload] || null\r\n            }\r\n        case DELETE_LIST:\r\n            const copyListItems = { ...listsFromLS }\r\n            const listId = copyListItems[action.payload].id\r\n            delete copyListItems[listId]\r\n            saveListsToLS(copyListItems)\r\n            return {\r\n                ...state,\r\n                lists: copyListItems,\r\n                listIdToDelete: '',\r\n                listById: null,\r\n                selectedList: state.selectedList && listId === state.selectedList.id ? null : state.selectedList\r\n            }\r\n        case UPDATE_LIST:\r\n            const copiedListsFromLS3 = { ...listsFromLS };\r\n            copiedListsFromLS3[action.payload.id].name = action.payload.name;\r\n            saveListsToLS(copiedListsFromLS3);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS3,\r\n                listToEdit: null\r\n            }\r\n        case SET_SELECTED_LIST:\r\n            const selectedList = getListsFromLS()[action.payload];\r\n            return {\r\n                ...state,\r\n                selectedList: selectedList\r\n            }\r\n        case ADD_TASK:\r\n            const copiedListsFromLS4 = { ...listsFromLS };\r\n            copiedListsFromLS4[action.payload.list.id].tasks.push(action.payload.task);\r\n            saveListsToLS(copiedListsFromLS4);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS4,\r\n                selectedList: copiedListsFromLS4[action.payload.list.id]\r\n            }\r\n        case SET_TASK_TO_DELETE:\r\n            return {\r\n                ...state,\r\n                taskToDelete: {\r\n                    task: action.payload.task,\r\n                    list: action.payload.list\r\n                }\r\n            }\r\n        case UNSET_TASK_TO_DELETE:\r\n            return {\r\n                ...state,\r\n                taskToDelete: null\r\n            }\r\n        case DELETE_TASK:\r\n            const copiedListsFromLS5 = { ...listsFromLS };\r\n            const copiedTasks = [...copiedListsFromLS5[state.taskToDelete!.list.id].tasks];\r\n            const task = copiedTasks.find(task => task.id === state.taskToDelete!.task.id);\r\n            copiedTasks.splice(copiedTasks.indexOf(task!), 1);\r\n            copiedListsFromLS5[state.taskToDelete!.list.id].tasks = copiedTasks;\r\n            saveListsToLS(copiedListsFromLS5);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS5,\r\n                selectedList: copiedListsFromLS5[state.taskToDelete!.list.id],\r\n                taskToDelete: null\r\n            }\r\n        case SET_TASK_TO_EDIT:\r\n            return {\r\n                ...state,\r\n                taskToEdit: {\r\n                    task: action.payload.task,\r\n                    list: action.payload.list\r\n                }\r\n            }\r\n\r\n        case UNSET_TASK_TO_EDIT:\r\n            return {\r\n                ...state,\r\n                taskToEdit: null\r\n            }\r\n        case UPDATE_TASK:\r\n            const copiedListsFromLS6 = { ...listsFromLS };\r\n            const copiedList = { ...copiedListsFromLS6[action.payload.list.id] };\r\n            const copiedTasks2 = [...copiedList.tasks];\r\n            const task2 = copiedTasks2.find((task) => task.id === parseInt(action.payload?.taskId));\r\n            const copiedTask = { ...task2! };\r\n            copiedTask.name = action.payload.taskName;\r\n            copiedTask.completed = action.payload.taskState;\r\n            const updatedTasks = copiedTasks2.map(task => task.id === copiedTask.id ? copiedTask : task);\r\n            copiedList.tasks = updatedTasks;\r\n            copiedListsFromLS6[copiedList.id] = copiedList;\r\n            saveListsToLS(copiedListsFromLS6);\r\n\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS6,\r\n                selectedList: copiedList,\r\n                taskToEdit: null\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\Type.ts",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\Header.tsx",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\CreateNewList.tsx",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\actions\\index.ts",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\actions\\notificationActions.ts",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\store\\actions\\listActions.ts",[],["80","81"],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\Sidebar.tsx",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\Notification.tsx",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\Lists.tsx",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\DeleteListModal.tsx",[],"D:\\MyProjects\\React-Redux-Typescript\\react-redux-typescript\\src\\components\\EditListModal.tsx",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":9,"column":1,"nodeType":"88","endLine":20,"endColumn":2},{"ruleId":"89","severity":1,"message":"90","line":1,"column":10,"nodeType":"91","messageId":"92","endLine":1,"endColumn":15},{"ruleId":"89","severity":1,"message":"93","line":2,"column":211,"nodeType":"91","messageId":"92","endLine":2,"endColumn":215},{"ruleId":"86","severity":1,"message":"87","line":26,"column":1,"nodeType":"88","endLine":160,"endColumn":2},{"ruleId":"82","replacedBy":"94"},{"ruleId":"84","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'parse' is defined but never used.","Identifier","unusedVar","'Task' is defined but never used.",["96"],["97"],"no-global-assign","no-unsafe-negation"]